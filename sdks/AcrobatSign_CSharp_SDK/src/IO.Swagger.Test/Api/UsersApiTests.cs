/* 
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 6.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using IO.Swagger.Client;
using IO.Swagger.Api;
using IO.Swagger.model.users;

namespace IO.Swagger.Test.Api
{
    /// <summary>
    ///  Class for testing UsersApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class UsersApiTests
    {
        private UsersApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new UsersApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of UsersApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' UsersApi
            //Assert.IsInstanceOfType(typeof(UsersApi), instance, "instance is a UsersApi");
        }

        
        /// <summary>
        /// Test GetGroupsOfUser
        /// </summary>
        [Test]
        public void GetGroupsOfUserTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string authorization = null;
            //string userId = null;
            //string xApiUser = null;
            //var response = instance.GetGroupsOfUser(authorization, userId, xApiUser);
            //Assert.IsInstanceOf<UserGroupsInfo> (response, "response is UserGroupsInfo");
        }
        
        /// <summary>
        /// Test GetUserDetail
        /// </summary>
        [Test]
        public void GetUserDetailTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string authorization = null;
            //string userId = null;
            //string xApiUser = null;
            //var response = instance.GetUserDetail(authorization, userId, xApiUser);
            //Assert.IsInstanceOf<DetailedUserInfo> (response, "response is DetailedUserInfo");
        }
        
        /// <summary>
        /// Test GetUserViews
        /// </summary>
        [Test]
        public void GetUserViewsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string authorization = null;
            //string userId = null;
            //UserViewInfo userViewInfo = null;
            //string xApiUser = null;
            //string xOnBehalfOfUser = null;
            //var response = instance.GetUserViews(authorization, userId, userViewInfo, xApiUser, xOnBehalfOfUser);
            //Assert.IsInstanceOf<UserViewResponse> (response, "response is UserViewResponse");
        }
        
        /// <summary>
        /// Test GetUsers
        /// </summary>
        [Test]
        public void GetUsersTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string authorization = null;
            //string xApiUser = null;
            //string cursor = null;
            //int? pageSize = null;
            //var response = instance.GetUsers(authorization, xApiUser, cursor, pageSize);
            //Assert.IsInstanceOf<UsersInfo> (response, "response is UsersInfo");
        }
        
        /// <summary>
        /// Test ModifyUser
        /// </summary>
        [Test]
        public void ModifyUserTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string authorization = null;
            //string userId = null;
            //DetailedUserInfo detailedUserInfo = null;
            //string xApiUser = null;
            //instance.ModifyUser(authorization, userId, detailedUserInfo, xApiUser);
            
        }
        
        /// <summary>
        /// Test ModifyUserState
        /// </summary>
        [Test]
        public void ModifyUserStateTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string authorization = null;
            //string userId = null;
            //UserStateInfo userStateInfo = null;
            //string xApiUser = null;
            //var response = instance.ModifyUserState(authorization, userId, userStateInfo, xApiUser);
            //Assert.IsInstanceOf<UserStatusUpdateResponse> (response, "response is UserStatusUpdateResponse");
        }
        
        /// <summary>
        /// Test UpdateGroupsOfUser
        /// </summary>
        [Test]
        public void UpdateGroupsOfUserTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string authorization = null;
            //string userId = null;
            //UserGroupsInfo userGroupsInfo = null;
            //string xApiUser = null;
            //instance.UpdateGroupsOfUser(authorization, userId, userGroupsInfo, xApiUser);
            
        }
        
    }

}
