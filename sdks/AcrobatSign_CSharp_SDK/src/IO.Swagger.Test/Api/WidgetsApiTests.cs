/* 
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 6.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using IO.Swagger.Client;
using IO.Swagger.Api;
using IO.Swagger.model.widgets;

namespace IO.Swagger.Test.Api
{
    /// <summary>
    ///  Class for testing WidgetsApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class WidgetsApiTests
    {
        private WidgetsApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new WidgetsApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of WidgetsApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' WidgetsApi
            //Assert.IsInstanceOfType(typeof(WidgetsApi), instance, "instance is a WidgetsApi");
        }

        
        /// <summary>
        /// Test CreateShareOnWidget
        /// </summary>
        [Test]
        public void CreateShareOnWidgetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string authorization = null;
            //string widgetId = null;
            //ShareCreationInfoList shareCreationInfoList = null;
            //string xApiUser = null;
            //string xOnBehalfOfUser = null;
            //var response = instance.CreateShareOnWidget(authorization, widgetId, shareCreationInfoList, xApiUser, xOnBehalfOfUser);
            //Assert.IsInstanceOf<ShareCreationResponseList> (response, "response is ShareCreationResponseList");
        }
        
        /// <summary>
        /// Test CreateWidget
        /// </summary>
        [Test]
        public void CreateWidgetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string authorization = null;
            //WidgetCreationInfoV6 widgetInfo = null;
            //string xApiUser = null;
            //string xOnBehalfOfUser = null;
            //var response = instance.CreateWidget(authorization, widgetInfo, xApiUser, xOnBehalfOfUser);
            //Assert.IsInstanceOf<WidgetCreationResponse> (response, "response is WidgetCreationResponse");
        }
        
        /// <summary>
        /// Test GetAllWidgetMembers
        /// </summary>
        [Test]
        public void GetAllWidgetMembersTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string authorization = null;
            //string widgetId = null;
            //string xApiUser = null;
            //string xOnBehalfOfUser = null;
            //string ifNoneMatch = null;
            //var response = instance.GetAllWidgetMembers(authorization, widgetId, xApiUser, xOnBehalfOfUser, ifNoneMatch);
            //Assert.IsInstanceOf<WidgetMembersInfo> (response, "response is WidgetMembersInfo");
        }
        
        /// <summary>
        /// Test GetEvents
        /// </summary>
        [Test]
        public void GetEventsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string authorization = null;
            //string widgetId = null;
            //string xApiUser = null;
            //string xOnBehalfOfUser = null;
            //string ifNoneMatch = null;
            //var response = instance.GetEvents(authorization, widgetId, xApiUser, xOnBehalfOfUser, ifNoneMatch);
            //Assert.IsInstanceOf<WidgetEventList> (response, "response is WidgetEventList");
        }
        
        /// <summary>
        /// Test GetParticipantSet
        /// </summary>
        [Test]
        public void GetParticipantSetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string authorization = null;
            //string widgetId = null;
            //string participantSetId = null;
            //string xApiUser = null;
            //string xOnBehalfOfUser = null;
            //string ifNoneMatch = null;
            //var response = instance.GetParticipantSet(authorization, widgetId, participantSetId, xApiUser, xOnBehalfOfUser, ifNoneMatch);
            //Assert.IsInstanceOf<DetailedWidgetParticipantSetInfo> (response, "response is DetailedWidgetParticipantSetInfo");
        }
        
        /// <summary>
        /// Test GetWidgetAgreements
        /// </summary>
        [Test]
        public void GetWidgetAgreementsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string authorization = null;
            //string widgetId = null;
            //string xApiUser = null;
            //string xOnBehalfOfUser = null;
            //bool? showHiddenAgreements = null;
            //string cursor = null;
            //int? pageSize = null;
            //var response = instance.GetWidgetAgreements(authorization, widgetId, xApiUser, xOnBehalfOfUser, showHiddenAgreements, cursor, pageSize);
            //Assert.IsInstanceOf<WidgetAgreements> (response, "response is WidgetAgreements");
        }
        
        /// <summary>
        /// Test GetWidgetAllDocumentsImageUrls
        /// </summary>
        [Test]
        public void GetWidgetAllDocumentsImageUrlsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string authorization = null;
            //string widgetId = null;
            //string xApiUser = null;
            //string xOnBehalfOfUser = null;
            //string ifNoneMatch = null;
            //string imageSizes = null;
            //bool? showImageAvailabilityOnly = null;
            //var response = instance.GetWidgetAllDocumentsImageUrls(authorization, widgetId, xApiUser, xOnBehalfOfUser, ifNoneMatch, imageSizes, showImageAvailabilityOnly);
            //Assert.IsInstanceOf<WidgetDocumentsImageUrlsInfo> (response, "response is WidgetDocumentsImageUrlsInfo");
        }
        
        /// <summary>
        /// Test GetWidgetAuditTrail
        /// </summary>
        [Test]
        public void GetWidgetAuditTrailTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string authorization = null;
            //string widgetId = null;
            //string xApiUser = null;
            //string xOnBehalfOfUser = null;
            //string ifNoneMatch = null;
            //var response = instance.GetWidgetAuditTrail(authorization, widgetId, xApiUser, xOnBehalfOfUser, ifNoneMatch);
            //Assert.IsInstanceOf<byte[]> (response, "response is byte[]");
        }
        
        /// <summary>
        /// Test GetWidgetCombinedDocument
        /// </summary>
        [Test]
        public void GetWidgetCombinedDocumentTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string authorization = null;
            //string widgetId = null;
            //string xApiUser = null;
            //string xOnBehalfOfUser = null;
            //string ifNoneMatch = null;
            //string versionId = null;
            //string participantId = null;
            //bool? attachAuditReport = null;
            //var response = instance.GetWidgetCombinedDocument(authorization, widgetId, xApiUser, xOnBehalfOfUser, ifNoneMatch, versionId, participantId, attachAuditReport);
            //Assert.IsInstanceOf<byte[]> (response, "response is byte[]");
        }
        
        /// <summary>
        /// Test GetWidgetDocumentInfo
        /// </summary>
        [Test]
        public void GetWidgetDocumentInfoTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string authorization = null;
            //string widgetId = null;
            //string documentId = null;
            //string xApiUser = null;
            //string xOnBehalfOfUser = null;
            //string ifNoneMatch = null;
            //var response = instance.GetWidgetDocumentInfo(authorization, widgetId, documentId, xApiUser, xOnBehalfOfUser, ifNoneMatch);
            //Assert.IsInstanceOf<byte[]> (response, "response is byte[]");
        }
        
        /// <summary>
        /// Test GetWidgetDocuments
        /// </summary>
        [Test]
        public void GetWidgetDocumentsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string authorization = null;
            //string widgetId = null;
            //string xApiUser = null;
            //string xOnBehalfOfUser = null;
            //string ifNoneMatch = null;
            //string versionId = null;
            //string participantId = null;
            //var response = instance.GetWidgetDocuments(authorization, widgetId, xApiUser, xOnBehalfOfUser, ifNoneMatch, versionId, participantId);
            //Assert.IsInstanceOf<WidgetDocuments> (response, "response is WidgetDocuments");
        }
        
        /// <summary>
        /// Test GetWidgetFormData
        /// </summary>
        [Test]
        public void GetWidgetFormDataTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string authorization = null;
            //string widgetId = null;
            //string xApiUser = null;
            //string xOnBehalfOfUser = null;
            //var response = instance.GetWidgetFormData(authorization, widgetId, xApiUser, xOnBehalfOfUser);
            //Assert.IsInstanceOf<byte[]> (response, "response is byte[]");
        }
        
        /// <summary>
        /// Test GetWidgetInfo
        /// </summary>
        [Test]
        public void GetWidgetInfoTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string authorization = null;
            //string widgetId = null;
            //string xApiUser = null;
            //string xOnBehalfOfUser = null;
            //string ifNoneMatch = null;
            //var response = instance.GetWidgetInfo(authorization, widgetId, xApiUser, xOnBehalfOfUser, ifNoneMatch);
            //Assert.IsInstanceOf<WidgetCreationInfoV6> (response, "response is WidgetCreationInfoV6");
        }
        
        /// <summary>
        /// Test GetWidgetNoteForApiUser
        /// </summary>
        [Test]
        public void GetWidgetNoteForApiUserTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string authorization = null;
            //string widgetId = null;
            //string xApiUser = null;
            //string xOnBehalfOfUser = null;
            //var response = instance.GetWidgetNoteForApiUser(authorization, widgetId, xApiUser, xOnBehalfOfUser);
            //Assert.IsInstanceOf<Note> (response, "response is Note");
        }
        
        /// <summary>
        /// Test GetWidgetSecurityOptionsForParticipation
        /// </summary>
        [Test]
        public void GetWidgetSecurityOptionsForParticipationTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string authorization = null;
            //string widgetId = null;
            //string participantSetId = null;
            //string participantId = null;
            //string ifNoneMatch = null;
            //string xApiUser = null;
            //var response = instance.GetWidgetSecurityOptionsForParticipation(authorization, widgetId, participantSetId, participantId, ifNoneMatch, xApiUser);
            //Assert.IsInstanceOf<ParticipantSecurityOption> (response, "response is ParticipantSecurityOption");
        }
        
        /// <summary>
        /// Test GetWidgetView
        /// </summary>
        [Test]
        public void GetWidgetViewTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string authorization = null;
            //string widgetId = null;
            //WidgetViewInfo widgetViewInfo = null;
            //string xApiUser = null;
            //string xOnBehalfOfUser = null;
            //var response = instance.GetWidgetView(authorization, widgetId, widgetViewInfo, xApiUser, xOnBehalfOfUser);
            //Assert.IsInstanceOf<WidgetViews> (response, "response is WidgetViews");
        }
        
        /// <summary>
        /// Test GetWidgets
        /// </summary>
        [Test]
        public void GetWidgetsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string authorization = null;
            //string xApiUser = null;
            //string xOnBehalfOfUser = null;
            //bool? showHiddenWidgets = null;
            //string cursor = null;
            //int? pageSize = null;
            //var response = instance.GetWidgets(authorization, xApiUser, xOnBehalfOfUser, showHiddenWidgets, cursor, pageSize);
            //Assert.IsInstanceOf<UserWidgets> (response, "response is UserWidgets");
        }
        
        /// <summary>
        /// Test UpdateWidget
        /// </summary>
        [Test]
        public void UpdateWidgetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string authorization = null;
            //string ifMatch = null;
            //string widgetId = null;
            //WidgetInfo widgetInfo = null;
            //string xApiUser = null;
            //string xOnBehalfOfUser = null;
            //instance.UpdateWidget(authorization, ifMatch, widgetId, widgetInfo, xApiUser, xOnBehalfOfUser);
            
        }
        
        /// <summary>
        /// Test UpdateWidgetNoteForApiUser
        /// </summary>
        [Test]
        public void UpdateWidgetNoteForApiUserTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string authorization = null;
            //string widgetId = null;
            //Note note = null;
            //string xApiUser = null;
            //string xOnBehalfOfUser = null;
            //instance.UpdateWidgetNoteForApiUser(authorization, widgetId, note, xApiUser, xOnBehalfOfUser);
            
        }
        
        /// <summary>
        /// Test UpdateWidgetSecurityOptionsForParticipation
        /// </summary>
        [Test]
        public void UpdateWidgetSecurityOptionsForParticipationTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string authorization = null;
            //string ifMatch = null;
            //string widgetId = null;
            //string participantSetId = null;
            //string participantId = null;
            //ParticipantSecurityOption participantSecurityOption = null;
            //string xApiUser = null;
            //instance.UpdateWidgetSecurityOptionsForParticipation(authorization, ifMatch, widgetId, participantSetId, participantId, participantSecurityOption, xApiUser);
            
        }
        
        /// <summary>
        /// Test UpdateWidgetState
        /// </summary>
        [Test]
        public void UpdateWidgetStateTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string authorization = null;
            //string ifMatch = null;
            //string widgetId = null;
            //WidgetStateInfo widgetStateInfo = null;
            //string xApiUser = null;
            //string xOnBehalfOfUser = null;
            //instance.UpdateWidgetState(authorization, ifMatch, widgetId, widgetStateInfo, xApiUser, xOnBehalfOfUser);
            
        }
        
        /// <summary>
        /// Test UpdateWidgetVisibility
        /// </summary>
        [Test]
        public void UpdateWidgetVisibilityTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string authorization = null;
            //string widgetId = null;
            //VisibilityInfo visibilityInfo = null;
            //string xApiUser = null;
            //string xOnBehalfOfUser = null;
            //instance.UpdateWidgetVisibility(authorization, widgetId, visibilityInfo, xApiUser, xOnBehalfOfUser);
            
        }
        
    }

}
