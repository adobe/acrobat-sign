/* 
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 6.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using IO.Swagger.Client;
using IO.Swagger.Api;
using IO.Swagger.model.webhooks;

namespace IO.Swagger.Test.Api
{
    /// <summary>
    ///  Class for testing WebhooksApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class WebhooksApiTests
    {
        private WebhooksApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new WebhooksApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of WebhooksApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' WebhooksApi
            //Assert.IsInstanceOfType(typeof(WebhooksApi), instance, "instance is a WebhooksApi");
        }

        
        /// <summary>
        /// Test CreateWebhook
        /// </summary>
        [Test]
        public void CreateWebhookTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string authorization = null;
            //WebhookInfo webhookInfo = null;
            //string xApiUser = null;
            //string xOnBehalfOfUser = null;
            //var response = instance.CreateWebhook(authorization, webhookInfo, xApiUser, xOnBehalfOfUser);
            //Assert.IsInstanceOf<WebhookCreationResponse> (response, "response is WebhookCreationResponse");
        }
        
        /// <summary>
        /// Test DeleteWebhook
        /// </summary>
        [Test]
        public void DeleteWebhookTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string authorization = null;
            //string ifMatch = null;
            //string webhookId = null;
            //string xApiUser = null;
            //string xOnBehalfOfUser = null;
            //instance.DeleteWebhook(authorization, ifMatch, webhookId, xApiUser, xOnBehalfOfUser);
            
        }
        
        /// <summary>
        /// Test GetWebhookInfo
        /// </summary>
        [Test]
        public void GetWebhookInfoTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string authorization = null;
            //string webhookId = null;
            //string xApiUser = null;
            //string xOnBehalfOfUser = null;
            //string ifNoneMatch = null;
            //var response = instance.GetWebhookInfo(authorization, webhookId, xApiUser, xOnBehalfOfUser, ifNoneMatch);
            //Assert.IsInstanceOf<WebhookInfo> (response, "response is WebhookInfo");
        }
        
        /// <summary>
        /// Test GetWebhooks
        /// </summary>
        [Test]
        public void GetWebhooksTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string authorization = null;
            //string xApiUser = null;
            //string xOnBehalfOfUser = null;
            //bool? showInActiveWebhooks = null;
            //string scope = null;
            //string resourceType = null;
            //string cursor = null;
            //int? pageSize = null;
            //var response = instance.GetWebhooks(authorization, xApiUser, xOnBehalfOfUser, showInActiveWebhooks, scope, resourceType, cursor, pageSize);
            //Assert.IsInstanceOf<UserWebhooks> (response, "response is UserWebhooks");
        }
        
        /// <summary>
        /// Test UpdateWebhook
        /// </summary>
        [Test]
        public void UpdateWebhookTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string authorization = null;
            //string ifMatch = null;
            //string webhookId = null;
            //WebhookInfo webhookInfo = null;
            //string xApiUser = null;
            //string xOnBehalfOfUser = null;
            //instance.UpdateWebhook(authorization, ifMatch, webhookId, webhookInfo, xApiUser, xOnBehalfOfUser);
            
        }
        
        /// <summary>
        /// Test UpdateWebhookState
        /// </summary>
        [Test]
        public void UpdateWebhookStateTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string authorization = null;
            //string ifMatch = null;
            //string webhookId = null;
            //WebhookStateInfo webhookStateInfo = null;
            //string xApiUser = null;
            //string xOnBehalfOfUser = null;
            //instance.UpdateWebhookState(authorization, ifMatch, webhookId, webhookStateInfo, xApiUser, xOnBehalfOfUser);
            
        }
        
    }

}
