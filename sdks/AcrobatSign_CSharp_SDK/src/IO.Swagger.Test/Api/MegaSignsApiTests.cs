/* 
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 6.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using IO.Swagger.Client;
using IO.Swagger.Api;
using IO.Swagger.model.megaSigns;

namespace IO.Swagger.Test.Api
{
    /// <summary>
    ///  Class for testing MegaSignsApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class MegaSignsApiTests
    {
        private MegaSignsApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new MegaSignsApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of MegaSignsApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' MegaSignsApi
            //Assert.IsInstanceOfType(typeof(MegaSignsApi), instance, "instance is a MegaSignsApi");
        }

        
        /// <summary>
        /// Test CreateMegaSign
        /// </summary>
        [Test]
        public void CreateMegaSignTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string authorization = null;
            //MegaSignCreationInfo megaSignInfo = null;
            //string xApiUser = null;
            //string xOnBehalfOfUser = null;
            //var response = instance.CreateMegaSign(authorization, megaSignInfo, xApiUser, xOnBehalfOfUser);
            //Assert.IsInstanceOf<MegaSignCreationResponse> (response, "response is MegaSignCreationResponse");
        }
        
        /// <summary>
        /// Test GetChildAgreementsInfoFile
        /// </summary>
        [Test]
        public void GetChildAgreementsInfoFileTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string authorization = null;
            //string megaSignId = null;
            //string childAgreementsInfoFileId = null;
            //string xApiUser = null;
            //string xOnBehalfOfUser = null;
            //string ifNoneMatch = null;
            //var response = instance.GetChildAgreementsInfoFile(authorization, megaSignId, childAgreementsInfoFileId, xApiUser, xOnBehalfOfUser, ifNoneMatch);
            //Assert.IsInstanceOf<byte[]> (response, "response is byte[]");
        }
        
        /// <summary>
        /// Test GetEvents
        /// </summary>
        [Test]
        public void GetEventsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string authorization = null;
            //string megaSignId = null;
            //string xApiUser = null;
            //string xOnBehalfOfUser = null;
            //string ifNoneMatch = null;
            //var response = instance.GetEvents(authorization, megaSignId, xApiUser, xOnBehalfOfUser, ifNoneMatch);
            //Assert.IsInstanceOf<MegasignEventList> (response, "response is MegasignEventList");
        }
        
        /// <summary>
        /// Test GetMegaSignChildAgreements
        /// </summary>
        [Test]
        public void GetMegaSignChildAgreementsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string authorization = null;
            //string megaSignId = null;
            //string xApiUser = null;
            //string xOnBehalfOfUser = null;
            //string cursor = null;
            //int? pageSize = null;
            //var response = instance.GetMegaSignChildAgreements(authorization, megaSignId, xApiUser, xOnBehalfOfUser, cursor, pageSize);
            //Assert.IsInstanceOf<MegaSignChildAgreements> (response, "response is MegaSignChildAgreements");
        }
        
        /// <summary>
        /// Test GetMegaSignCombinedDocument
        /// </summary>
        [Test]
        public void GetMegaSignCombinedDocumentTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string authorization = null;
            //string megaSignId = null;
            //string xApiUser = null;
            //string xOnBehalfOfUser = null;
            //string ifNoneMatch = null;
            //bool? attachAuditReport = null;
            //var response = instance.GetMegaSignCombinedDocument(authorization, megaSignId, xApiUser, xOnBehalfOfUser, ifNoneMatch, attachAuditReport);
            //Assert.IsInstanceOf<byte[]> (response, "response is byte[]");
        }
        
        /// <summary>
        /// Test GetMegaSignFormData
        /// </summary>
        [Test]
        public void GetMegaSignFormDataTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string authorization = null;
            //string megaSignId = null;
            //string xApiUser = null;
            //string xOnBehalfOfUser = null;
            //var response = instance.GetMegaSignFormData(authorization, megaSignId, xApiUser, xOnBehalfOfUser);
            //Assert.IsInstanceOf<byte[]> (response, "response is byte[]");
        }
        
        /// <summary>
        /// Test GetMegaSignInfo
        /// </summary>
        [Test]
        public void GetMegaSignInfoTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string authorization = null;
            //string megaSignId = null;
            //string xApiUser = null;
            //string xOnBehalfOfUser = null;
            //string ifNoneMatch = null;
            //var response = instance.GetMegaSignInfo(authorization, megaSignId, xApiUser, xOnBehalfOfUser, ifNoneMatch);
            //Assert.IsInstanceOf<MegaSignCreationInfo> (response, "response is MegaSignCreationInfo");
        }
        
        /// <summary>
        /// Test GetMegaSignView
        /// </summary>
        [Test]
        public void GetMegaSignViewTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string authorization = null;
            //string megaSignId = null;
            //MegaSignViewInfo megaSignViewInfo = null;
            //string xApiUser = null;
            //string xOnBehalfOfUser = null;
            //var response = instance.GetMegaSignView(authorization, megaSignId, megaSignViewInfo, xApiUser, xOnBehalfOfUser);
            //Assert.IsInstanceOf<MegaSignViewResponse> (response, "response is MegaSignViewResponse");
        }
        
        /// <summary>
        /// Test GetMegaSigns
        /// </summary>
        [Test]
        public void GetMegaSignsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string authorization = null;
            //string xApiUser = null;
            //string xOnBehalfOfUser = null;
            //string cursor = null;
            //int? pageSize = null;
            //var response = instance.GetMegaSigns(authorization, xApiUser, xOnBehalfOfUser, cursor, pageSize);
            //Assert.IsInstanceOf<MegaSigns> (response, "response is MegaSigns");
        }
        
        /// <summary>
        /// Test UpdateMegaSignState
        /// </summary>
        [Test]
        public void UpdateMegaSignStateTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string authorization = null;
            //string ifMatch = null;
            //string megaSignId = null;
            //MegaSignStateInfo megaSignStateInfo = null;
            //string xApiUser = null;
            //string xOnBehalfOfUser = null;
            //instance.UpdateMegaSignState(authorization, ifMatch, megaSignId, megaSignStateInfo, xApiUser, xOnBehalfOfUser);
            
        }
        
    }

}
